<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 OmniFaces.

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
   the License. You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
   an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
   specific language governing permissions and limitations under the License.
 -->
<facelet-taglib id="of"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
	version="2.0"
>
	<namespace>http://omnifaces.org/functions</namespace>

	<!-- Strings ================================================================================================== -->

	<function>
		<description>
			<![CDATA[
				Abbreviate the given text on the given size limit with ellipsis.
			]]>
		</description>
		<function-name>abbreviate</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String abbreviate(java.lang.String, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Concatenate the string representation of the given objects. This is useful when you don't know
				beforehand if one of the both hands is a string or is <code>null</code>, otherwise the new EL 2.2
				<code>#{bean.string1.concat(bean.string2)}</code> can just be used.
			]]>
		</description>
		<function-name>concat</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String concat(java.lang.Object, java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Capitalize the given string, i.e. uppercase the first character.
			]]>
		</description>
		<function-name>capitalize</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String capitalize(java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Replace all matches of the given pattern on the given string with the given replacement.
			]]>
		</description>
		<function-name>replaceAll</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String replaceAll(java.lang.String, java.lang.String, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns true if the given string matches the given pattern.
			]]>
		</description>
		<function-name>matches</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String matches(java.lang.String, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				URL-prettify the given string. It performs the following tasks:
				<ul>
				<li>Lowercase the string.
				<li>Remove combining diacritical marks.
				<li>Replace non-alphanumeric characters by hyphens.
				</ul>
				This is useful when populating links with dynamic paths obtained from user controlled variables, such
				as blog titles.
			]]>
		</description>
		<function-name>prettyURL</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String prettyURL(java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				URL-encode the given string using UTF-8. This is useful for cases where you can't use
				<code>&lt;f:param&gt;</code>.
			]]>
		</description>
		<function-name>encodeURL</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String encodeURL(java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Escapes the given string according the JavaScript code rules. This escapes among others the special
				characters, the whitespace, the quotes and the unicode characters. Useful whenever you want to use a
				Java string variable as a JavaScript string variable.
			]]>
		</description>
		<function-name>escapeJS</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String escapeJS(java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given string with 1 parameter.
				Design notice: There are five formatX() functions, each taking 1 to 5 format parameters because EL
				functions does not support varargs methods nor overloaded function names.
			]]>
		</description>
		<function-name>format1</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String format1(java.lang.String, java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given string with 2 parameters.
				Design notice: There are five formatX() functions, each taking 1 to 5 format parameters because EL
				functions does not support varargs methods nor overloaded function names.
			]]>
		</description>
		<function-name>format2</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String format2(java.lang.String, java.lang.Object, java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given string with 3 parameters.
				Design notice: There are five formatX() functions, each taking 1 to 5 format parameters because EL
				functions does not support varargs methods nor overloaded function names.
			]]>
		</description>
		<function-name>format3</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String format3(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given string with 4 parameters.
				Design notice: There are five formatX() functions, each taking 1 to 5 format parameters because EL
				functions does not support varargs methods nor overloaded function names.
			]]>
		</description>
		<function-name>format4</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String format4(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given string with 5 parameters.
				Design notice: There are five formatX() functions, each taking 1 to 5 format parameters because EL
				functions does not support varargs methods nor overloaded function names.
			]]>
		</description>
		<function-name>format5</function-name>
		<function-class>org.omnifaces.el.functions.Strings</function-class>
		<function-signature>java.lang.String format5(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)</function-signature>
	</function>

	<!-- Arrays =================================================================================================== -->

	<function>
		<description>
			<![CDATA[
				Creates and returns a dummy object array of the given size. This is useful if you want to iterate
				<i>n</i> times over an <code>&lt;ui:repeat&gt;</code>, which doesn't support EL in <code>begin</code>
				and <code>end</code> attributes.
			]]>
		</description>
		<function-name>createArray</function-name>
		<function-class>org.omnifaces.el.functions.Arrays</function-class>
		<function-signature>java.lang.Object[] createArray(int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Creates and an integer array which starts at the given integer and ends at the given integer, inclusive. This is
				useful if you want to for example populate a <code>&lt;f:selectItems&gt;</code> which shows an integer range to
				represent days and years.
			]]>
		</description>
		<function-name>createIntegerArray</function-name>
		<function-class>org.omnifaces.el.functions.Arrays</function-class>
		<function-signature>java.lang.int[] createIntegerArray(int, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns <code>true</code> if the string representation of an item of the given array equals to the
				string representation of the given item. This returns <code>false</code> if either the array or the
				item is null. This is useful if you want to for example check if <code>#{paramValues.foo}</code>
				contains a certain value.
			]]>
		</description>
		<function-name>contains</function-name>
		<function-class>org.omnifaces.el.functions.Arrays</function-class>
		<function-signature>boolean contains(java.lang.Object[], java.lang.Object)</function-signature>
	</function>

	<!-- Converters =============================================================================================== -->

	<function>
		<description>
			<![CDATA[
				Converts a <code>Set&lt;E&gt;</code> to a <code>List&lt;E&gt;</code>. Useful when you want to iterate
				over a <code>Set</code> in for example <code>&lt;ui:repeat&gt;</code>.
			]]>
		</description>
		<function-name>setToList</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.util.List setToList(java.util.Set)</function-signature>
	</function>
	
	<function>
		<description>
			<![CDATA[
				Converts any iterable, like a Collection or more specifically a Set into a List so it can 
				be used with components like <code>&lt;ui:repeat&gt;</code> and <code>&lt;h:datatable&gt;</code>.
			]]>
		</description>
		<function-name>iterableToList</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.util.List iterableToList(java.lang.Iterable)</function-signature>
	</function>
	
	<function>
		<description>
			<![CDATA[
				Wraps any iterable, like a Collection or more specifically a Set into a DataModel so it can 
				be used with components like <code>&lt;ui:repeat&gt;</code> and <code>&lt;h:datatable&gt;</code>.
			]]>
		</description>
		<function-name>iterableToModel</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>javax.faces.model.DataModel iterableToModel(java.lang.Iterable)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Converts a <code>Map&lt;K, V&gt;</code> to a <code>List&lt;Map.Entry&ltK, V&gt;&gt;</code>. Useful when
				you want to iterate over a <code>Map</code> in for example <code>&lt;ui:repeat&gt;</code>. Each of the
				entries has the usual <code>getKey()</code> and <code>getValue()</code> methods.
			]]>
		</description>
		<function-name>mapToList</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.util.List mapToList(java.util.Map)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Joins all elements of the given array to a single string, separated by the given separator.
			]]>
		</description>
		<function-name>joinArray</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.lang.String joinArray(java.lang.Object, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Joins all elements of the given collection to a single string, separated by the given separator.
			]]>
		</description>
		<function-name>joinCollection</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.lang.String joinCollection(java.util.Collection, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Joins all elements of the given map to a single string, separated by the given key-value pair separator and
				entry separator.
			]]>
		</description>
		<function-name>joinMap</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.lang.String joinMap(java.util.Map, java.lang.String, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Splits the given array into an array of subarrays of the given fragment size.
			]]>
		</description>
		<function-name>splitArray</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.lang.Object[] splitArray(java.lang.Object, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Splits the given list into a list of sublists of the given fragment size. 
			]]>
		</description>
		<function-name>splitList</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.util.List splitList(java.util.List, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Encode given object as JSON.
			]]>
		</description>
		<function-name>toJson</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.lang.String toJson(java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Print the stack trace of the given exception.
			]]>
		</description>
		<function-name>printStackTrace</function-name>
		<function-class>org.omnifaces.el.functions.Converters</function-class>
		<function-signature>java.lang.String printStackTrace(java.lang.Throwable)</function-signature>
	</function>

	<!-- Dates ==================================================================================================== -->

	<function>
		<description>
			<![CDATA[
				Format the given date in the given pattern and system default timezone. This is useful when you want to
				format dates in for example the <code>title</code> attribute of an UI component, or the
				<code>itemLabel</code> attribute of select item, or wherever you can't use the
				<code>&lt;f:convertDateTime&gt;</code> tag.
			]]>
		</description>
		<function-name>formatDate</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.lang.String formatDate(java.util.Date, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given date in the given pattern with given timezone. This is useful when you want to format
				dates in for example the <code>title</code> attribute of an UI component, or the <code>itemLabel</code>
				attribute of select item, or wherever you can't use the <code>&lt;f:convertDateTime&gt;</code> tag.
			]]>
		</description>
		<function-name>formatDateWithTimezone</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.lang.String formatDateWithTimezone(java.util.Date, java.lang.String, java.lang.Object)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of years. The years can be negative.
			]]>
		</description>
		<function-name>addYears</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addYears(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of months. The months can be negative.
			]]>
		</description>
		<function-name>addMonths</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addMonths(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of weeks. The weeks can be negative.
			]]>
		</description>
		<function-name>addWeeks</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addWeeks(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of days. The days can be negative.
			]]>
		</description>
		<function-name>addDays</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addDays(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of hours. The hours can be negative.
			]]>
		</description>
		<function-name>addHours</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addHours(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of minutes. The minutes can be negative.
			]]>
		</description>
		<function-name>addMinutes</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addMinutes(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a new date instance which is a sum of the given date and the given amount of seconds. The seconds can be negative.
			]]>
		</description>
		<function-name>addSeconds</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Date addSeconds(java.util.Date, int)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of years between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>yearsBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int yearsBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of months between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>monthsBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int monthsBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of weeks between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>weeksBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int weeksBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of days between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>daysBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int daysBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of hours between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>hoursBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int hoursBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of minutes between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>minutesBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int minutesBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the amount of seconds between two given dates. This will be negative when the end date is before the start date.
			]]>
		</description>
		<function-name>secondsBetween</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>int secondsBetween(java.util.Date, java.util.Date)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a mapping of month names by month numbers for the current locale. For example: "January=1", "February=2",
				etc. This is useful if you want to for example populate a <code>&lt;f:selectItems&gt;</code> which shows all
				months. The locale is obtained by Faces#getLocale(). The mapping is per locale stored in a local cache
				to improve retrieving performance.
			]]>
		</description>
		<function-name>getMonths</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Map getMonths()</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a mapping of short month names by month numbers for the current locale. For example: "Jan=1", "Feb=2",
				etc. This is useful if you want to for example populate a <code>&lt;f:selectItems&gt;</code> which shows all
				short months. The locale is obtained by Faces#getLocale(). The mapping is per locale stored in a local
				cache to improve retrieving performance.
			]]>
		</description>
		<function-name>getShortMonths</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Map getShortMonths()</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a mapping of day of week names in ISO 8601 order for the current locale. For example: "Monday=1", "Tuesday=2",
				etc. This is useful if you want to for example populate a <code>&lt;f:selectItems&gt;</code> which shows all
				days of week. The locale is obtained by Faces#getLocale(). The mapping is per locale stored in a local cache
				to improve retrieving performance.
			]]>
		</description>
		<function-name>getDaysOfWeek</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Map getDaysOfWeek()</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns a mapping of short day of week names in ISO 8601 order for the current locale. For example: "Mon=1", "Tue=2",
				etc. This is useful if you want to for example populate a <code>&lt;f:selectItems&gt;</code> which shows all
				short days of week. The locale is obtained by Faces#getLocale(). The mapping is per locale stored in a local
				cache to improve retrieving performance.
			]]>
		</description>
		<function-name>getShortDaysOfWeek</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.util.Map getShortDaysOfWeek()</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the month name from the mapping associated with the given month number for the current locale. For
				example: "1=January", "2=February", etc. The locale is obtained by Faces#getLocale().
			]]>
		</description>
		<function-name>getMonth</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.lang.String getMonth(java.lang.Integer)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the short month name from the mapping associated with the given month number for the current locale. For
				example: "1=Jan", "2=Feb", etc. The locale is obtained by Faces#getLocale().
			]]>
		</description>
		<function-name>getShortMonth</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.lang.String getShortMonth(java.lang.Integer)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the day of week name from the mapping associated with the given day of week number in ISO 8601 order
				(Monday first) for the current locale. For example: "1=Monday", "2=Tuesday", etc. The locale is obtained by
				Faces#getLocale().
			]]>
		</description>
		<function-name>getDayOfWeek</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.lang.String getDayOfWeek(java.lang.Integer)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Returns the short day of week name from the mapping associated with the given day of week number in ISO 8601
				order (Monday first) for the current locale. For example: "1=Mon", "2=Tue", etc. The locale is obtained by
				Faces#getLocale().
			]]>
		</description>
		<function-name>getShortDayOfWeek</function-name>
		<function-class>org.omnifaces.el.functions.Dates</function-class>
		<function-signature>java.lang.String getShortDayOfWeek(java.lang.Integer)</function-signature>
	</function>

	<!-- Numbers ================================================================================================== -->

	<function>
		<description>
			<![CDATA[
				Format the given bytes to nearest 10<sup>n</sup> with IEC binary unit (KiB, MiB, etc) with rounding
				precision of 1 fraction. For example:
				<ul>
					<li>1023 bytes will appear as 1023 B
					<li>1024 bytes will appear as 1.0 KiB
					<li>500000 bytes will appear as 488.3 KiB
					<li>1048576 bytes will appear as 1.0 GiB
				</ul>
			]]>
		</description>
		<function-name>formatBytes</function-name>
		<function-class>org.omnifaces.el.functions.Numbers</function-class>
		<function-signature>java.lang.String formatBytes(java.lang.Long)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given number as currency with the given symbol. This is useful when you want to format numbers as
				currency in for example the <code>title</code> attribute of an UI component, or the <code>itemLabel</code>
				attribute of select item, or wherever you can't use the <code>&lt;f:convertNumber&gt;</code> tag. The format
				locale will be set to the one as obtained by <code>Faces#getLocale()</code>.
			]]>
		</description>
		<function-name>formatCurrency</function-name>
		<function-class>org.omnifaces.el.functions.Numbers</function-class>
		<function-signature>java.lang.String formatCurrency(java.lang.Number, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given number in the given pattern. This is useful when you want to format numbers in for example the
				<code>title</code> attribute of an UI component, or the <code>itemLabel</code> attribute of select item, or
				wherever you can't use the <code>&lt;f:convertNumber&gt;</code> tag. The format locale will be set to the one as
				obtained by <code>Faces#getLocale()</code>.
			]]>
		</description>
		<function-name>formatNumber</function-name>
		<function-class>org.omnifaces.el.functions.Numbers</function-class>
		<function-signature>java.lang.String formatNumber(java.lang.Number, java.lang.String)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given number in the locale-default pattern. This is useful when you want to format numbers in for 
				example the <code>title</code> attribute of an UI component, or the <code>itemLabel</code> attribute of select
				item, or wherever you can't use the <code>&lt;f:convertNumber&gt;</code> tag. The format locale will be set to
				the one as obtained by <code>Faces#getLocale()</code>.
			]]>
		</description>
		<function-name>formatNumberDefault</function-name>
		<function-class>org.omnifaces.el.functions.Numbers</function-class>
		<function-signature>java.lang.String formatNumberDefault(java.lang.Number)</function-signature>
	</function>

	<function>
		<description>
			<![CDATA[
				Format the given number as percentage. This is useful when you want to format numbers as
				percentage in for example the <code>title</code> attribute of an UI component, or the <code>itemLabel</code>
				attribute of select item, or wherever you can't use the <code>&lt;f:convertNumber&gt;</code> tag. The format
				locale will be set to the one as obtained by <code>Faces#getLocale()</code>.
			]]>
		</description>
		<function-name>formatPercent</function-name>
		<function-class>org.omnifaces.el.functions.Numbers</function-class>
		<function-signature>java.lang.String formatPercent(java.lang.Number)</function-signature>
	</function>

	<!-- Objects ================================================================================================== -->

	<function>
		<description>
			<![CDATA[
				Return the first non-<code>null</code> object from the two objects.
			]]>
		</description>
		<function-name>coalesce</function-name>
		<function-class>org.omnifaces.el.functions.Objects</function-class>
		<function-signature>java.lang.Object coalesce(java.lang.Object, java.lang.Object)</function-signature>
	</function>

</facelet-taglib>