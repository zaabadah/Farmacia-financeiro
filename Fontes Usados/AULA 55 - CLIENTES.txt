<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:p="http://primefaces.org/ui">
<h:head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>Cidades</title>
	
	<h:outputStylesheet library="css" name="estilo.css" />
</h:head>



<h:body>
	<p:growl id="mensagem" />

	<h:form id="formListagem">
		<p:panel header="Lista de Clientes">

<p:dataTable id="tabela" emptyMessage="Nenhum registro encontrado."
				paginator="true" value="#{clienteBean.clientes}" var="cliente"
				rows="5">
				<f:facet name="header">
					<p:commandButton value="Novo" oncomplete="PF('dialogo').show();"
						actionListener="#{clienteBean.novo}"
						update=":mensagem :formCadastro:painel">
						<f:actionListener
							type="org.omnifaces.eventlistener.ResetInputAjaxActionListener" />
					</p:commandButton>

				</f:facet>

				<p:column headerText="Nome" filterBy="#{cliente.pessoa.nome}"
					sortBy="#{cliente.pessoa.nome}">
					<h:outputText value="#{cliente.pessoa.nome}" />
				</p:column>

				<p:column headerText="CPF" filterBy="#{cliente.pessoa.cpf}"
					sortBy="#{cliente.pessoa.cpf}">
					<h:outputText value="#{cliente.pessoa.cpf}" />
				</p:column>

				<p:column headerText="Data de Cadastro"
					sortBy="#{cliente.dataCadastro}">
					<h:outputText value="#{cliente.dataCadastro}">
						<f:convertDateTime locale="pt_BR" />
					</h:outputText>
				</p:column>

				<p:column headerText="Liberado" sortBy="#{cliente.liberado}">
					<p:selectBooleanCheckbox value="#{cliente.liberado}"
						disabled="true" />
				</p:column>

				<p:column headerText="Opções">
				</p:column>
			</p:dataTable>
		</p:panel>
	</h:form>

	<p:dialog header="Clientes - Cadastro" widgetVar="dialogo"
		draggable="false" resizable="false" modal="true" closable="false">
		<h:form id="formCadastro">
			<h:panelGrid id="painel" columns="2">
				<p:outputLabel for="pessoa" value="Pessoa:" />
				<p:selectOneMenu id="pessoa" filter="true"
					value="#{clienteBean.cliente.pessoa}" required="true"
					requiredMessage="O campo 'Pessoa' é obrigatório"
					converter="omnifaces.SelectItemsConverter">
					<f:selectItem noSelectionOption="true"
						itemLabel="Selecione uma pessoa" />
					<f:selectItems value="#{clienteBean.pessoas}" var="pessoa"
						itemValue="#{pessoa}" itemLabel="#{pessoa.nome} - #{pessoa.cpf}" />
				</p:selectOneMenu>

				<p:outputLabel for="dataCadastro" value="Data de Cadastro:" />
				<p:calendar id="dataCadastro"
					value="#{clienteBean.cliente.dataCadastro}" required="true"
					requiredMessage="O campo 'Data de Cadastro' é obrigatório"
					size="10" />

				<p:outputLabel for="liberado" value="Liberado:" />
				<p:selectBooleanCheckbox id="liberado"
					value="#{clienteBean.cliente.liberado}" required="true"
					requiredMessage="O campo 'Liberado' é obrigatório" />
			</h:panelGrid>

			<h:panelGrid columns="2">
				<p:commandButton value="Salvar"
					update=":mensagem :formCadastro:painel :formListagem:tabela"
					actionListener="#{clienteBean.salvar}" />
				<p:commandButton value="Fechar" oncomplete="PF('dialogo').hide();" />
			</h:panelGrid>
		</h:form>
	</p:dialog>
</h:body>
</html>
















BEAN


import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.omnifaces.util.Messages;

import br.com.financeiro.dao.ClienteDAO;
import br.com.financeiro.dao.PessoaDAO;
import br.com.financeiro.domain.Cliente;
import br.com.financeiro.domain.Pessoa;

@SuppressWarnings("serial")
@ManagedBean
@ViewScoped
public class ClienteBean implements Serializable {
	private Cliente cliente;

	private List<Cliente> clientes;
	private List<Pessoa> pessoas;

	public Cliente getCliente() {
		return cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	public List<Cliente> getClientes() {
		return clientes;
	}

	public void setClientes(List<Cliente> clientes) {
		this.clientes = clientes;
	}

	public List<Pessoa> getPessoas() {
		return pessoas;
	}

	public void setPessoas(List<Pessoa> pessoas) {
		this.pessoas = pessoas;
	}

	@PostConstruct
	public void listar() {
		try {
			ClienteDAO clienteDAO = new ClienteDAO();
			clientes = clienteDAO.listar("dataCadastro");
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar listar os clientes");
			erro.printStackTrace();
		}
	}

	public void novo() {
		try {
			cliente = new Cliente();

			PessoaDAO pessoaDAO = new PessoaDAO();
			pessoas = pessoaDAO.listar("nome");
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar criar um novo cliente");
			erro.printStackTrace();
		}
	}

	public void salvar() {
		try {
			ClienteDAO clienteDAO = new ClienteDAO();
			clienteDAO.merge(cliente);

			cliente = new Cliente();
			
			clientes = clienteDAO.listar("dataCadastro");

			PessoaDAO pessoaDAO = new PessoaDAO();
			pessoas = pessoaDAO.listar("nome");
			
			Messages.addGlobalInfo("Cliente salvo com sucesso");
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar salvar o cliente");
			erro.printStackTrace();
		}
	}
}