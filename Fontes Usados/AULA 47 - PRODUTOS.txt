<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:p="http://primefaces.org/ui">
<h:head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>Produtos</title>
	<h:outputStylesheet library="css" name="estilo.css" />
</h:head>
<h:body>
	<p:growl id="mensagem" />

	<h:form id="formListagem">
		<p:panel header="Lista de Produtos">
			<p:dataTable id="tabela" emptyMessage="Nenhum registro encontrado."
				paginator="true" value="#{produtoBean.produtos}" var="produto"
				rows="5">
				<f:facet name="header">
					<p:commandButton value="Novo" actionListener="#{produtoBean.novo}"
						oncomplete="PF('dialogo').show();"
						update=":mensagem :formCadastro:painel">
						<f:actionListener
							type="org.omnifaces.eventlistener.ResetInputAjaxActionListener" />
					</p:commandButton>
				</f:facet>

				<p:column headerText="Descrição">
					<h:outputText value="#{produto.descricao}" />
				</p:column>

				<p:column headerText="Quantidade">
					<h:outputText value="#{produto.quantidade}" />
				</p:column>

				<p:column headerText="Preço">
					<h:outputText value="#{produto.preco}">
						<f:convertNumber locale="pt_BR" minFractionDigits="2" />
					</h:outputText>	
				</p:column>

				<p:column headerText="Fornecedor">
					<h:outputText value="#{produto.fornecedor.descricao}" />
				</p:column>

				<p:column headerText="Opções">
					<p:commandButton icon="ui-icon-trash"
						actionListener="#{produtoBean.excluir}"
						update=":mensagem :formListagem:tabela">
						<p:confirm header="Confirmação"
							message="Deseja excluir o produto?" icon="ui-icon-alert" />
						<f:attribute name="produtoSelecionado" value="#{produto}" />
					</p:commandButton>

					<p:commandButton icon="ui-icon-pencil"
						actionListener="#{produtoBean.editar}"
						update=":mensagem :formCadastro:painel"
						oncomplete="PF('dialogo').show();">
						<f:attribute name="produtoSelecionado" value="#{produto}" />
						<f:actionListener
							type="org.omnifaces.eventlistener.ResetInputAjaxActionListener" />
					</p:commandButton>
				</p:column>
			</p:dataTable>

			<p:confirmDialog global="true">
				<p:commandButton value="Sim" type="button"
					styleClass="ui-confirmdialog-yes" icon="ui-icon-check" />
				<p:commandButton value="Não" type="button"
					styleClass="ui-confirmdialog-no" icon="ui-icon-close" />
			</p:confirmDialog>
		</p:panel>
	</h:form>

	<p:dialog header="Produtos - Cadastro" widgetVar="dialogo"
		draggable="false" resizable="false" modal="true" closable="false">
		<h:form id="formCadastro">
			<h:panelGrid id="painel" columns="2">
				<p:outputLabel value="Descrição:" />
				<p:inputText maxlength="50" size="30"
					value="#{produtoBean.produto.descricao}" required="true"
					requiredMessage="O campo 'Descrição' é obrigatório" />

				<p:outputLabel value="Quantidade:" />
				<p:inputText maxlength="5" size="10"
					value="#{produtoBean.produto.quantidade}" required="true"
					requiredMessage="O campo 'Quantidade' é obrigatório"
					converterMessage="Informe um valor válido para o campo 'Quantidade'"
					validatorMessage="Informe um valor entre 0 e 1000 para o campo 'Quantidade'">
					<f:validateLongRange minimum="0" maximum="1000" />
				</p:inputText>	

				<p:outputLabel value="Preço:" />
				<p:inputText maxlength="7" size="10"
					value="#{produtoBean.produto.preco}" required="true"
					requiredMessage="O campo 'Preço' é obrigatório"
					converterMessage="Informe um valor válido para o campo 'Preço''"
					validatorMessage="Informe um valor entre 0,01 e 9999,99 para o campo 'Preço'">
					<f:validateDoubleRange minimum="0.01" maximum="9999.99" />
					<f:convertNumber locale="pt_BR" minFractionDigits="2" />
				</p:inputText>

				<p:outputLabel value="Fornecedor:" />
				<p:selectOneMenu filter="true"
					value="#{produtoBean.produto.fornecedor}"
					converter="omnifaces.SelectItemsConverter" required="true"
					requiredMessage="O campo 'Fornecedor' é obrigatório">
					<f:selectItem noSelectionOption="true"
						itemLabel="Selecione um fornecedor" />
					<f:selectItems value="#{produtoBean.fornecedor}" var="fornecedor"
						itemValue="#{fornecedor}" itemLabel="#{fornecedor.descricao}" />
				</p:selectOneMenu>

			</h:panelGrid>

			<h:panelGrid columns="2">
				<p:commandButton value="Salvar"
					actionListener="#{produtoBean.salvar}"
					update=":mensagem :formCadastro:painel :formListagem:tabela" />
				<p:commandButton value="Fechar" oncomplete="PF('dialogo').hide();" />
			</h:panelGrid>
		</h:form>
	</p:dialog>
</h:body>
</html>












BEAN


mport java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;

import org.omnifaces.util.Messages;

import br.com.financeiro.dao.FornecedorDAO;
import br.com.financeiro.dao.ProdutoDAO;
import br.com.financeiro.domain.Fornecedor;
import br.com.financeiro.domain.Produto;

@SuppressWarnings("serial")
@ManagedBean
@ViewScoped
public class ProdutoBean implements Serializable {
	private Produto  produto;
	private List<Produto> produtos;
	private List<Fornecedor> fornecedor;
	
	public Produto getProduto() {
		return produto;
	}

	public void setProduto(Produto produto) {
		this.produto = produto;
	}

	public List<Produto> getProdutos() {
		return produtos;
	}

	public void setProdutos(List<Produto> produtos) {
		this.produtos = produtos;
	}

	public List<Fornecedor> getFornecedor() {
		return fornecedor;
	}

	public void setFornecedor(List<Fornecedor> fornecedor) {
		this.fornecedor = fornecedor;
	}

	@PostConstruct
	public void listar() {
		try {
			ProdutoDAO produtoDAO = new ProdutoDAO();
			produtos = produtoDAO.listar();
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar listar os produtos");
			erro.printStackTrace();
		}
	}
	
	public void novo() {
		try {
			produto = new Produto();

			FornecedorDAO fabricanteDAO = new FornecedorDAO();
			fornecedor = fabricanteDAO.listar();
		} catch (RuntimeException erro) {
			Messages.addFlashGlobalError("Ocorreu um erro ao tentar gerar um novo produto");
			erro.printStackTrace();
		}
	}
	
	public void editar(ActionEvent evento){
		try {
			produto = (Produto) evento.getComponent().getAttributes().get("produtoSelecionado");

			FornecedorDAO fornecedorDAO = new FornecedorDAO();
			fornecedor = fornecedorDAO.listar();
		} catch (RuntimeException erro) {
			Messages.addFlashGlobalError("Ocorreu um erro ao tentar selecionar um produto");
			erro.printStackTrace();
		}	
	}
	
	public void salvar() {
		try {
			ProdutoDAO produtoDAO = new ProdutoDAO();
			produtoDAO.merge(produto);

			produto = new Produto();

			FornecedorDAO fornecedorDAO = new FornecedorDAO();
			fornecedor = fornecedorDAO.listar();

			produtos = produtoDAO.listar();

			Messages.addGlobalInfo("Produto salvo com sucesso");
		} catch (RuntimeException erro) {
			Messages.addFlashGlobalError("Ocorreu um erro ao tentar salvar o produto");
			erro.printStackTrace();
		}
	}

	public void excluir(ActionEvent evento) {
		try {
			produto = (Produto) evento.getComponent().getAttributes().get("produtoSelecionado");

			ProdutoDAO produtoDAO = new ProdutoDAO();
			produtoDAO.excluir(produto);

			produtos = produtoDAO.listar();

			Messages.addGlobalInfo("Produto removido com sucesso");
		} catch (RuntimeException erro) {
			Messages.addFlashGlobalError("Ocorreu um erro ao tentar remover o produto");
			erro.printStackTrace();
		}
	}
}