XHTML

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets">
<h:head>
	<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
	<title>Fornecedores</title>

	<h:outputStylesheet library="css" name="estilo.css" />

</h:head>
<h:body>
	<p:growl id="mensagem" />


	<h:form id="formListagem">




		<p:panel header="Lista de Fornecedores">
			<p:dataTable emptyMessage="Nenhum registro encontrado."
				paginator="true" value="#{fornecedorBean.fornecedores}" var="fornecedor"
				rows="6" id="tabela">
				<f:facet name="header">
					<p:commandButton value="Novo" oncomplete="PF('dialogo').show();"
						actionListener="#{fornecedorBean.novo()}"
						update=":formCadastro:pnCadastro" />
				</f:facet>

				<p:column headerText="Código" sortBy="#{fornecedor.codigo}"	>
					<h:outputText value="#{fornecedor.codigo}" />
				</p:column>

				<p:column headerText="Descrição" sortBy="#{fornecedor.descricao}"
					filterBy="#{fornecedor.descricao}">
					<h:outputText value="#{fornecedor.descricao}" />
				</p:column>



				<p:column headerText="Opções">
					<p:commandButton icon="ui-icon-trash"
						actionListener="#{fornecedorBean.excluir}"
						update=":mensagem :formListagem:tabela">
						<p:confirm header="Confirmação" message="Deseja excluir o fornecedor?"
							icon="ui-icon-alert" />
						<f:attribute name="estadoSelecionado" value="#{fornecedor}" />
					</p:commandButton>

					<p:commandButton icon="ui-icon-pencil"
						actionListener="#{fornecedorBean.editar}"
						update=":formCadastro:pnCadastro"
						oncomplete="PF('dialogo').show();">
						<f:attribute name="fornecedorSelecionado" value="#{fornecedor}" />
					</p:commandButton>



				</p:column>
			</p:dataTable>

			<p:confirmDialog global="true">
				<p:commandButton value="Sim" type="button"
					styleClass="ui-confirmdialog-yes" icon="ui-icon-check" />
				<p:commandButton value="Não" type="button"
					styleClass="ui-confirmdialog-no" icon="ui-icon-close" />
			</p:confirmDialog>

		</p:panel>
	</h:form>

	<p:dialog header="Fornecedores - Cadastro" widgetVar="dialogo"
		draggable="false" resizable="false" modal="true" closable="false">
		<h:form id="formCadastro">
			<h:panelGrid columns="2" id="pnCadastro">
				<p:outputLabel value="Nome:" />
				<p:inputText maxlength="50" size="30"
					value="#{fornecedorBean.fornecedor.descricao}" required="true"
					requiredMessage="O campo 'Nome' é obrigatório" />

				
			</h:panelGrid>

			<h:panelGrid columns="2">
				<p:commandButton value="Salvar"
					actionListener="#{fornecedorBean.salvar()}"
					update=":mensagem :formCadastro:pnCadastro :formListagem:tabela" />
				<p:commandButton value="Fechar" oncomplete="PF('dialogo').hide();" />
			</h:panelGrid>
		</h:form>
	</p:dialog>
</h:body>
</html>









BEAN


package br.com.financeiro.Bean;

import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.event.ActionEvent;

import org.omnifaces.util.Messages;

import br.com.financeiro.dao.FornecedorDAO;
import br.com.financeiro.domain.Fornecedor;

@SuppressWarnings("serial")
@ManagedBean
@ViewScoped
public class FornecedorBean implements Serializable {
	private Fornecedor fornecedor;
	private List<Fornecedor>fornecedores;
	
	public Fornecedor getFornecedor() {
		return fornecedor;
	}
	
	public void setFornecedor(Fornecedor fornecedor) {
		this.fornecedor = fornecedor;
	}
	
	public List<Fornecedor> getFornecedores() {
		return fornecedores;
	}
	
	public void setFornecedores(List<Fornecedor> fornecedores) {
		this.fornecedores = fornecedores;
	}
	

	public void novo() {
		fornecedor = new Fornecedor();
	}

	public void salvar() {
		try {
			FornecedorDAO fornecedorDAO = new FornecedorDAO();
			fornecedorDAO.merge(fornecedor);

			novo();
			fornecedores = fornecedorDAO.listar();
			
			Messages.addGlobalInfo("Fornecedor salvo com sucesso");
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar salvar o estado");
			erro.printStackTrace();
		}
	}
	
	

@PostConstruct
	public void listar(){
		try{
			FornecedorDAO fornecedorDAO = new FornecedorDAO();
			fornecedores = fornecedorDAO.listar();
		} catch (RuntimeException erro) {
			Messages.addGlobalError("Ocorreu um erro ao tentar listar os fornecedores");
			erro.printStackTrace();
		}
	}


public void excluir(ActionEvent evento) {
	try {
		fornecedor = (Fornecedor) evento.getComponent().getAttributes().get("estadoSelecionado");

		FornecedorDAO fornecedorDAO = new FornecedorDAO();
		fornecedorDAO.excluir(fornecedor);
		
		fornecedores = fornecedorDAO.listar();

		Messages.addGlobalInfo("Forneedor removido com sucesso");
	} catch (RuntimeException erro) {
		Messages.addFlashGlobalError("Ocorreu um erro ao tentar remover o Fornecedor");
		erro.printStackTrace();
	}
}

public void editar(ActionEvent evento){
	fornecedor = (Fornecedor) evento.getComponent().getAttributes().get("fornecedorSelecionado");
}

	
	

}
